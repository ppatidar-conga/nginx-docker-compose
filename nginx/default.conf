server {
    location / {
        root /var/www/html;
    }

    error_page 429 = @429;
    location @429 {
        set $current_time $msec;
        default_type application/json;
        
        return 429 '{"status": 429,"time":"$time_iso8601_p1.$millisec+$time_iso8601_p2" , "message": "Too Many Requests"}';
    }

        # Custom error handling for brokerapi failure
    location @brokerapi_failure {
         set $current_time $msec;
        default_type application/json;
        
        return 403 '{"status": 403,"broker failire time":"$time_iso8601_p1.$millisec+$time_iso8601_p2" , "message": "Too Many Requests"}';
    }

    location /brokerapi {
        internal;  # Mark this location as internal (not directly accessible)
        proxy_pass http://nodebroaker:8183/brokerapi;  # Replace with your brokerapi's URL
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/ {

        auth_request /brokerapi;

        limit_req zone=tenant_limit burst=20 nodelay;
        limit_req_status 429;  
        
        proxy_set_header Host $host;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-APIkey $http_x_apikey;

        proxy_pass http://node:8181/;

          # Handle errors from brokerapi
        auth_request_set $auth_status $upstream_status;
        error_page 403 = @brokerapi_failure;

    }
}